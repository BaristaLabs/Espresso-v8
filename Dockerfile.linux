ARG BASE_IMAGE
ARG TARGETPLATFORM
FROM ${BASE_IMAGE} as source

ENV DEBIAN_FRONTEND=noninteractive
RUN echo "APT::Get::Assume-Yes \"true\";" > /etc/apt/apt.conf.d/90assumeyes

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        ca-certificates \
        bzip2 \
        curl \
        git \
        python \
        tar \
        xz-utils

RUN git config --global core.symlinks true

# Downloads and install V8 prerequisites 
ENV DepotToolsUrl="https://chromium.googlesource.com/chromium/tools/depot_tools.git"

RUN git clone "${DepotToolsUrl}" "depot_tools" \
    # Touch a metrics.cfg file to supress a warning when invoking gclient
    && echo '{"is-googler": false, "countdown": 10, "version": 1, "opt-in": null}' | tee "/depot_tools/metrics.cfg"

# Add Depot Tools to the path
ENV PATH="${PATH}:/depot_tools"

# Install/Configure Depot Tools
RUN gclient

# Fetch v8 source
RUN fetch v8

FROM --platform=${TARGETPLATFORM} ${BASE_IMAGE} as builder

ENV DEBIAN_FRONTEND=noninteractive
RUN echo "APT::Get::Assume-Yes \"true\";" > /etc/apt/apt.conf.d/90assumeyes

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        ca-certificates \
        bzip2 \
        build-essential \
        bison \
        flex \
        curl \
        git \
        python \
        tar \
        xz-utils \
        binfmt-support \
        jq \
        gcc \
        g++ \
        libncurses5-dev \
        clang \
        llvm \
        libglib2.0-dev \
        libcurl4 \
        libicu60 \
        libunwind8 \
        lsb-release \
        netcat \
        zip \
        unzip \
        pkg-config -yqq \
        nano \
        qemu \
        qemu-user \
        qemu-user-binfmt

RUN mkdir /build
WORKDIR /build

# Build Ninja
RUN git config --global core.symlinks true
RUN git clone https://github.com/ninja-build/ninja.git -b v1.8.2 \
    && cd ninja \
    && ./configure.py --bootstrap

# Add Ninja to the path
ENV PATH="/build/ninja:${PATH}"

# Build GN
RUN git clone https://gn.googlesource.com/gn \
    && cd gn \
    && python build/gen.py \
    && ninja -C out

# Add GN to the path
ENV PATH="/build/gn/out:${PATH}"

# Copy Depot Tools from the source image

COPY --from=source /depot_tools/ /build/depot_tools/

# Add Depot Tools to the path
ENV PATH="${PATH}:/build/depot_tools"

# Install/Configure Depot Tools
RUN gclient

# Copy V8 from the source image
COPY --from=source /v8/ /build/v8/

ARG V8_VERSION

# Checkout the desired version
RUN cd v8 \
    && git fetch \
    && git checkout ${V8_VERSION}

# Attempt to fix clang++
RUN rm /build/v8/third_party/llvm-build/Release+Asserts/bin/clang++ && \
    ln -s /usr/bin/clang++ /build/v8/third_party/llvm-build/Release+Asserts/bin/clang++

ARG V8_ARCH

# Copy in patches
COPY ./patches/${V8_ARCH}/ /build/

# Copy in gn args
COPY args.gn.${V8_ARCH} /build/v8/out/v8.release/args.gn

ARG V8_TARGET

# Build
RUN cd v8 \
    && gn gen out/v8.release \
    && /build/ninja/ninja -C out/v8.release ${V8_TARGET}

RUN readelf -h /build/v8/out/v8.release/obj/libv8_monolith.a > libv8_monolith_elf.txt

# Create the binaries layer that only contains the built binaries, headers and other metadata
FROM --platform=${TARGETPLATFORM} ${BASE_IMAGE} as binaries

# Copy built/generated artifacts

COPY --from=source /build/v8/obj/*.a /v8/
COPY --from=source /build/libv8_monolith_elf.txt /v8/
COPY --from=source /build/v8/include/ /v8/include/